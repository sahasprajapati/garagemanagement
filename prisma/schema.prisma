// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator prismaClassGenerator {
  provider               = "prisma-class-generator"
  separateRelationFields = true
  dryRun                 = false
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              Int              @id @default(autoincrement())
  action          String
  rolePermissions RolePermission[]

  condition Json?

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([action, subjectId], name: "permissionIdentifier")
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model RolePermission {
  id Int @id @default(autoincrement())

  role         Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int?
  permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@unique([roleId, permissionId], name: "rolePermissionIdentifier")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  user            User[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  role     Role?  @relation(fields: [roleId], references: [id])
  roleId   Int?
  password String
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Staff {
  id                 Int              @id @default(autoincrement())
  name               String
  mobile             String           @unique
  designation        StaffDesignation @relation(fields: [staffDesignationId], references: [id])
  staffDesignationId Int
  attendance         Attendance[]
  leave              Leave[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Service   Service[]
}

model StaffDesignation {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  staff       Staff[]
  totalLeave  Int     @default(15)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Attendance {
  id      Int             @id @default(autoincrement())
  staff   Staff           @relation(fields: [staffId], references: [id])
  staffId Int
  status  AttendaceStatus @default(ABSENT)
  date    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([staffId, date], name: "attendanceIdentifier")
}

model Leave {
  id          Int      @id @default(autoincrement())
  days        Int      @default(0)
  description String
  staff       Staff    @relation(fields: [staffId], references: [id])
  staffId     Int
  from        DateTime
  to          DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum AttendaceStatus {
  PRESENT
  ABSENT
  LEAVE
}

model Customer {
  id Int @id @default(autoincrement())

  name    String
  mobile  String  @unique
  email   String?
  address String?

  transaction Transaction[]
  vehicle     OwnedVehicle[]
  Service     Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transaction {
  id     Int           @id @default(autoincrement())
  medium PaymentMedium @default(CASH)

  Service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  Int       @unique
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Vehicle {
  id           Int     @id @default(autoincrement())
  name         String
  fuel         String?
  engine       String?
  mileage      String?
  transmission String?
  features     String?

  ownedVehicle OwnedVehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OwnedVehicle {
  id Int @id @default(autoincrement())

  kilometerRun String?
  makeYear     String?
  color        String?
  price        String?
  numberPlate        String

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  Service    Service[]

  vehicleWheelerTypeId Int
  vehicleTypeId        Int
  vehicleBrandId       Int
  vehicleId            Int

  wheelerType VehicleWheelerType @relation(fields: [vehicleWheelerTypeId], references: [id])
  type        VehicleType        @relation(fields: [vehicleTypeId], references: [id])
  brand       VehicleBrand       @relation(fields: [vehicleBrandId], references: [id])
  vehicle     Vehicle            @relation(fields: [vehicleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // VehicleBrand         VehicleBrand?       @relation(fields: [vehicleBrandId], references: [id])
  // vehicleBrandId       Int?
  // VehicleType          VehicleType?        @relation(fields: [vehicleTypeId], references: [id])
  // vehicleTypeId        Int?
  // VehicleWheelerType   VehicleWheelerType? @relation(fields: [vehicleWheelerTypeId], references: [id])
  // vehicleWheelerTypeId Int?
}

model VehicleBrand {
  id   Int    @id @default(autoincrement())
  name String

  vehicleWheelerType   VehicleWheelerType? @relation(fields: [vehicleWheelerTypeId], references: [id])
  vehicleWheelerTypeId Int?
  vehicle              OwnedVehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VehicleType {
  id   Int    @id @default(autoincrement())
  name String

  vehicleWheelerType   VehicleWheelerType? @relation(fields: [vehicleWheelerTypeId], references: [id])
  vehicleWheelerTypeId Int?
  vehicle              OwnedVehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Car/Bike
model VehicleWheelerType {
  id      Int            @id @default(autoincrement())
  name    String
  types   VehicleType[]
  brands  VehicleBrand[]
  vehicle OwnedVehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PaymentMedium {
  CASH
  CREDIT
  ESEWA
  KHALTI
  FONEPAY
}

model Service {
  id Int @id @default(autoincrement())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  vehicle   OwnedVehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int

  transaction Transaction?

  staff   Staff? @relation(fields: [staffId], references: [id])
  staffId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ServiceOffered {
  RECONDITION
  WASH
  SERVICING
}
