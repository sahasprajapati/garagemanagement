generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator prismaClassGenerator {
  provider               = "prisma-class-generator"
  dryRun                 = "false"
  separateRelationFields = "true"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              Int              @id @default(autoincrement())
  action          String
  condition       Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  subjectId       Int?
  subject         Subject?         @relation(fields: [subjectId], references: [id])
  rolePermissions RolePermission[]

  @@unique([action, subjectId])
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  permissions Permission[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int?
  permissionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
  user            User[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  roleId    Int?
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role?    @relation(fields: [roleId], references: [id])
}

model Staff {
  id                 Int              @id @default(autoincrement())
  name               String
  mobile             String           @unique
  staffDesignationId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  designation        StaffDesignation @relation(fields: [staffDesignationId], references: [id])
  attendance         Attendance[]
  leave              Leave[]
  Service            Service[]
}

model StaffDesignation {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  totalLeave  Int      @default(15)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  staff       Staff[]
}

model Attendance {
  id        Int             @id @default(autoincrement())
  staffId   Int
  status    AttendaceStatus @default(ABSENT)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  date      DateTime
  staff     Staff           @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
}

model Leave {
  id          Int      @id @default(autoincrement())
  staffId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  days        Int      @default(0)
  description String
  from        DateTime
  to          DateTime
  staff       Staff    @relation(fields: [staffId], references: [id])
}

model Customer {
  id          Int            @id @default(autoincrement())
  name        String
  mobile      String         @unique
  email       String?
  address     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  vehicle     OwnedVehicle[]
  Service     Service[]
  transaction Transaction[]
}

model Transaction {
  id         Int           @id @default(autoincrement())
  medium     PaymentMedium @default(CASH)
  serviceId  Int           @unique
  customerId Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
  Customer   Customer?     @relation(fields: [customerId], references: [id])
  Service    Service       @relation(fields: [serviceId], references: [id])
}

model Vehicle {
  id           Int     @id @default(autoincrement())
  name         String
  fuel         String?
  engine       String?
  mileage      String?
  transmission String?
  features     String?

  ownedVehicle OwnedVehicle[]

  vehicleTypeId        Int
  vehicleWheelerTypeId Int
  vehicleBrandId       Int
  brand                VehicleBrand       @relation(fields: [vehicleBrandId], references: [id])
  type                 VehicleType        @relation(fields: [vehicleTypeId], references: [id])
  wheelerType          VehicleWheelerType @relation(fields: [vehicleWheelerTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OwnedVehicle {
  id           Int     @id @default(autoincrement())
  kilometerRun String?
  makeYear     String?
  color        String?
  price        String?
  numberPlate  String

  customerId Int
  vehicleId  Int
  customer   Customer  @relation(fields: [customerId], references: [id])
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
  Service    Service[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

model VehicleBrand {
  id                   Int                 @id @default(autoincrement())
  name                 String
  vehicleWheelerTypeId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  vehicleWheelerType   VehicleWheelerType? @relation(fields: [vehicleWheelerTypeId], references: [id])
  Vehicle              Vehicle[]
}

model VehicleType {
  id                   Int                 @id @default(autoincrement())
  name                 String
  vehicleWheelerTypeId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  vehicleWheelerType   VehicleWheelerType? @relation(fields: [vehicleWheelerTypeId], references: [id])
  Vehicle              Vehicle[]
}

model VehicleWheelerType {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  brands    VehicleBrand[]
  types     VehicleType[]
  Vehicle   Vehicle[]
}

model Service {
  id          Int            @id @default(autoincrement())
  customerId  Int
  vehicleId   Int
  staffId     Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  serviceName ServiceOffered
  customer    Customer       @relation(fields: [customerId], references: [id])
  staff       Staff?         @relation(fields: [staffId], references: [id])
  vehicle     OwnedVehicle   @relation(fields: [vehicleId], references: [id])
  transaction Transaction?
}

enum AttendaceStatus {
  PRESENT
  ABSENT
  LEAVE
}

enum PaymentMedium {
  CASH
  CREDIT
  ESEWA
  KHALTI
  FONEPAY
}

enum ServiceOffered {
  RECONDITION
  WASH
  SERVICING
}
